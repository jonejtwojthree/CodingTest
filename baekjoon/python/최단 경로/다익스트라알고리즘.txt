다익스트라 알고리즘
- 출발노드에서 다른노드들까지의 최단거리들을 찾자

1. 출발노드 설정
2. 출발 노드를 기준으로 각 노드의 최소 비용을 저장
3. 방문하지 않은 노드 중에서 가장 비용이 적은 노드를 선택
4. 해당 노드를 거쳐서 특정한 노드로 가는 경우를 고려하여 최소 비용 갱신

벨만포드 알고리즘
(heapq 필요없음)
1. 출발노드 설정
2. n-1번 반복
2-1 모든 간선을 돈다
(간선을 edge=(a,b,c) 형태로 받음)(그래프 필요없음)
2-2 now, next, weight = edges[i][0], edges[i][1], edges[i][2]
2-3 if distance[now] + weight < distance[next] -> 갱신

3. n번쨰에
if distance[now] + weight < distance[next]를 만족하면 False반환(negative_cycle)

플로이드-워셜 알고리즘
(heapq 필요없음)
1. 하나의 정점에서 다른 정점으로 바로 갈 수 있으면 최소 비용을, 갈 수 없으면 INF로 배열 저장
-> dist배열을 2중배열을 해야됨!!!

(그래프를 inf로 다 만들고 간선을 업데이트 하고)
2. 3중 for문을 통해 거쳐가는 정점을 설저한 후 해당 정점을 거쳐가서 비용이 줄어들면 값을 변경
(3중 for문을 돌때 그래프를 업데이트)(그래프겸 distance배열)
